compile-and-unit-test:
    stage: build
    image: python:3.10
    script:
        - mkdir -p dist
        - rm -rf dist/*
        - pip install -r requirements.txt
        - pip install -r test/requirements.txt
        - pip freeze > all-requirements.txt
        - chmod +x devops/scripts/run_unit_tests.sh
        - ./devops/scripts/run_unit_tests.sh
        - version_major=3
        - version_minor=0
        - PACKAGE_VERSION=${version_major}.${version_minor}.$CI_PIPELINE_IID
        - echo $PACKAGE_VERSION > .version
        - cp -r LICENSE NOTICE README.md requirements.txt sdlib sdutil sdutil.py .version dist
        - ls dist
    artifacts:
        name: sdutil
        paths:
        - dist/
        - all-requirements.txt

compile-and-unit-test-latest:
    stage: build
    image: python
    allow_failure: true
    script:
        - mkdir -p dist
        - rm -rf dist/*
        - pip install -r requirements.txt
        - pip install -r test/requirements.txt
        - chmod +x devops/scripts/run_unit_tests.sh
        - ./devops/scripts/run_unit_tests.sh
        - version_major=3
        - version_minor=0
        - PACKAGE_VERSION=${version_major}.${version_minor}.$CI_PIPELINE_IID
        - echo $PACKAGE_VERSION > .version
        - cp -r LICENSE NOTICE README.md requirements.txt sdlib sdutil sdutil.py .version dist
        - ls dist
    artifacts:
        when: always
        name: sdutil
        paths:
        - dist/


clean-package:
  stage: build
  image: ubuntu
  script: |
    apt-get update
    apt-get install curl -y
    apt-get install tar -y
    apt-get install gzip -y
    apt-get install git -y
    apt-get install jq -y
    version_major=3
    version_minor=0
    PACKAGE_VERSION=${version_major}.${version_minor}.$CI_PIPELINE_IID
    echo "Reading package information from ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages"
    packages_json=$(curl --header "PRIVATE-TOKEN: $PRIVATE_ACCESS_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages")
    echo ${packages_json}
    package_id=$(echo ${packages_json} | jq ".[] | select(.version==\"$PACKAGE_VERSION\") | .id")
    curl --request DELETE --header "PRIVATE-TOKEN: $PRIVATE_ACCESS_TOKEN" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/$package_id"
  only:
    refs:
      - master
